{
  "stats": {
    "suites": 11,
    "tests": 22,
    "passes": 21,
    "pending": 0,
    "failures": 1,
    "start": "2021-03-22T23:05:22.855Z",
    "end": "2021-03-22T23:05:22.989Z",
    "duration": 134,
    "testsRegistered": 22,
    "passPercent": 95.45454545454545,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e65c29de-e0a3-4d04-b8eb-64ce38dc9706",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f43a47ea-72ce-4ea0-8747-d27d56e8c487",
          "title": "Black-box testing of a (any) sorting algorithm",
          "fullFile": "C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js",
          "file": "\\test\\black-box.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "44dac125-0208-4a1c-95f4-997ddf6f4ae0",
              "title": "small arrays",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js",
              "file": "\\test\\black-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns correctly already sorted array",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays returns correctly already sorted array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [1, 2, 3, 4, 5, 6]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray)",
                  "err": {},
                  "uuid": "d595bdaa-24b1-4ec1-9f92-11f9cd9c4f77",
                  "parentUUID": "44dac125-0208-4a1c-95f4-997ddf6f4ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single element if input array contains only 1 element",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays returns single element if input array contains only 1 element",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [50]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray)",
                  "err": {},
                  "uuid": "790da415-f6ab-4dc1-876f-823210e5115b",
                  "parentUUID": "44dac125-0208-4a1c-95f4-997ddf6f4ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts correctly when there are same numbers multiple times",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays sorts correctly when there are same numbers multiple times",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [5, 8, 5, 12, 5, 19, 5, 2, 3, 4, 6, 5]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "6793fda2-e708-4e10-997b-8f2fcd10b8e8",
                  "parentUUID": "44dac125-0208-4a1c-95f4-997ddf6f4ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts negative numbers correctly",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays sorts negative numbers correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [-22, -11, 1, -50, 4]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "9e60cd22-d21e-4471-8aeb-f62d1c06af06",
                  "parentUUID": "44dac125-0208-4a1c-95f4-997ddf6f4ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts correctly partially sorted array",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays sorts correctly partially sorted array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [1, 2, 3, 4, 5, 6, 20, 11, 14, 9]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "dd673e17-211d-42d4-ad3a-9d7d88e3dfb1",
                  "parentUUID": "44dac125-0208-4a1c-95f4-997ddf6f4ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts correctly reverse sorted array",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays sorts correctly reverse sorted array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [10, 9, 7, 5, 3, 2, 1]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "72da4f0d-dee1-4290-9eb6-eb11367ce6d3",
                  "parentUUID": "44dac125-0208-4a1c-95f4-997ddf6f4ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts correctly unsorted array of positive values (including zeros)",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays sorts correctly unsorted array of positive values (including zeros)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = randomArrayGenerator({\n    min: 1,\n    max: 100,\n    elements: 20\n})\ninputArray[10] = 0\ninputArray[14] = 0\ninputArray[19] = 0\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "77b11d6d-9e27-455b-b2db-9941d721edaa",
                  "parentUUID": "44dac125-0208-4a1c-95f4-997ddf6f4ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "supports sorting mixed data primitives and objects",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays supports sorting mixed data primitives and objects",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = ['cat', 'dog', 55, 11, 60, {foo: 'bar'}]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql([{foo: 'bar'}, 11, 55, 60, 'cat', 'dog'])",
                  "err": {},
                  "uuid": "d660e056-8b0d-434b-bde4-97b26edf602e",
                  "parentUUID": "44dac125-0208-4a1c-95f4-997ddf6f4ae0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d595bdaa-24b1-4ec1-9f92-11f9cd9c4f77",
                "790da415-f6ab-4dc1-876f-823210e5115b",
                "6793fda2-e708-4e10-997b-8f2fcd10b8e8",
                "9e60cd22-d21e-4471-8aeb-f62d1c06af06",
                "dd673e17-211d-42d4-ad3a-9d7d88e3dfb1",
                "72da4f0d-dee1-4290-9eb6-eb11367ce6d3",
                "77b11d6d-9e27-455b-b2db-9941d721edaa",
                "d660e056-8b0d-434b-bde4-97b26edf602e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0d74e8cc-7121-4c8e-93cf-0c63a6e4f3dd",
              "title": "big arrays/big numbers",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js",
              "file": "\\test\\black-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sorts correctly big array",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm big arrays/big numbers sorts correctly big array",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = randomArrayGenerator({\n    min: 1,\n    max: 10000,\n    elements: 10000\n})\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "198d8478-2e03-4659-8f65-53a7275b4a58",
                  "parentUUID": "0d74e8cc-7121-4c8e-93cf-0c63a6e4f3dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts correctly array of big numbers",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm big arrays/big numbers sorts correctly array of big numbers",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = inputArray = randomArrayGenerator({\n    min: 1000000000000000,\n    max: 9000000000000000,\n    elements: 50\n})\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "c38af682-9ce4-4b00-a99c-f5b43090fbeb",
                  "parentUUID": "0d74e8cc-7121-4c8e-93cf-0c63a6e4f3dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "198d8478-2e03-4659-8f65-53a7275b4a58",
                "c38af682-9ce4-4b00-a99c-f5b43090fbeb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 62,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "33170887-9db1-4e33-8d68-ab98e0b80ce2",
              "title": "floating values",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js",
              "file": "\\test\\black-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sorts correctly an array of float values",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm floating values sorts correctly an array of float values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [1.23, 4.67, 2.11, 8.59, 0.001, 2.00001, 10.333333333]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "b964475f-9f52-447b-b134-355b3ff7e754",
                  "parentUUID": "33170887-9db1-4e33-8d68-ab98e0b80ce2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts correctly an array of mix integer and float values",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm floating values sorts correctly an array of mix integer and float values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [1.23, 60, 600, 4.67, 10, 9, 2.11, 8.59, 0.001, 2.00001, 10.333333333, 11, 9]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "285ab953-4694-4117-9601-9a6dfc998b12",
                  "parentUUID": "33170887-9db1-4e33-8d68-ab98e0b80ce2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b964475f-9f52-447b-b134-355b3ff7e754",
                "285ab953-4694-4117-9601-9a6dfc998b12"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "622fdeeb-7e67-49c8-9aae-32b2e0d7400e",
              "title": "negative",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js",
              "file": "\\test\\black-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns empty array if empty array input is provided",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm negative returns empty array if empty array input is provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = []\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql([])",
                  "err": {},
                  "uuid": "f9a8aea7-baae-49de-814c-58a76145f438",
                  "parentUUID": "622fdeeb-7e67-49c8-9aae-32b2e0d7400e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9a8aea7-baae-49de-814c-58a76145f438"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "63881647-eed2-4cdc-bba7-9d17e544c296",
              "title": "others",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js",
              "file": "\\test\\black-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "verifies sorting algorithm is stable",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm others verifies sorting algorithm is stable",
                  "timedOut": false,
                  "duration": 19,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [{\n    id: 5,\n    name: 'paul'\n}, {\n    id: 8,\n    name: 'eva'\n}, {\n    id: 2,\n    name: 'john'\n}, {\n    id: 10,\n    name: 'nick'\n}, {\n    id: 5,\n    name: 'kevin'\n}, {\n    id: 5,\n    name: 'mike'\n}, {\n    id: 18,\n    name: 'peter'\n}, {\n    id: 1,\n    name: 'adam'\n}]\nconsole.log('input array=', inputArray)\nsortedArray = quickSortV2(inputArray)\nconsole.log('sorted array=', sortedArray)\nconst {\n    inputArrayIndexes,\n    sortedArrayIndexes\n} = findIndexes(['paul', 'kevin', 'mike'])\nconsole.log(inputArrayIndexes)\nconsole.log(sortedArrayIndexes)\n// verify that elements with the same id (same key), have relative order maintained\nsortedArrayIndexes.forEach((element, index) => {\n    expect(element[\"index\"]).to.be.at.least(inputArrayIndexes[index][\"index\"])\n})",
                  "err": {
                    "message": "AssertionError: expected 3 to be at least 4",
                    "estack": "AssertionError: expected 3 to be at least 4\n    at C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js:182:51\n    at Array.forEach (<anonymous>)\n    at Context.<anonymous> (test\\black-box.spec.js:181:32)\n    at processImmediate (internal/timers.js:461:21)",
                    "diff": "- 3\n+ 4\n"
                  },
                  "uuid": "4b68f556-66af-4824-8756-af91ba6e8b19",
                  "parentUUID": "63881647-eed2-4cdc-bba7-9d17e544c296",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "4b68f556-66af-4824-8756-af91ba6e8b19"
              ],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "53197104-557b-4fc6-9ba7-8daf993aff16",
          "title": "White-box testing of quick sort algorithm",
          "fullFile": "C:\\Projects\\sifchain-assessment\\test\\white-box.spec.js",
          "file": "\\test\\white-box.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "53cedc21-913e-48b4-bc03-764944ce61fe",
              "title": "1-level binary tree",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\white-box.spec.js",
              "file": "\\test\\white-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns immediately when single element is provided",
                  "fullTitle": "White-box testing of quick sort algorithm 1-level binary tree returns immediately when single element is provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// comment: this is the same case as if input array would be empty\ninputArray = [6]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray)",
                  "err": {},
                  "uuid": "22c6f7a1-9580-4700-9d7e-5b8c0fcec686",
                  "parentUUID": "53cedc21-913e-48b4-bc03-764944ce61fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "goes through the right (greater) side of the binary tree, once",
                  "fullTitle": "White-box testing of quick sort algorithm 1-level binary tree goes through the right (greater) side of the binary tree, once",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [1,2]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray)",
                  "err": {},
                  "uuid": "58454ce7-53e0-4f5e-9dae-783051357597",
                  "parentUUID": "53cedc21-913e-48b4-bc03-764944ce61fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "goes through the left (lesser) side of the binary tree, once",
                  "fullTitle": "White-box testing of quick sort algorithm 1-level binary tree goes through the left (lesser) side of the binary tree, once",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [2, 1]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "fe0c00bb-6f92-4977-87b0-f480ea2c32f3",
                  "parentUUID": "53cedc21-913e-48b4-bc03-764944ce61fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "22c6f7a1-9580-4700-9d7e-5b8c0fcec686",
                "58454ce7-53e0-4f5e-9dae-783051357597",
                "fe0c00bb-6f92-4977-87b0-f480ea2c32f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "82af99d8-01df-499d-90f3-5c803c6af1d7",
              "title": "2-level binary tree",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\white-box.spec.js",
              "file": "\\test\\white-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates 2 level binary tree",
                  "fullTitle": "White-box testing of quick sort algorithm 2-level binary tree creates 2 level binary tree",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [10,7,12,8,11]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "ece9df06-ec2d-4a61-91bb-759006bf2d0a",
                  "parentUUID": "82af99d8-01df-499d-90f3-5c803c6af1d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ece9df06-ec2d-4a61-91bb-759006bf2d0a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ef8a254b-5dfd-4ee4-86fa-d018b8ab2548",
              "title": "N-level binary tree",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\white-box.spec.js",
              "file": "\\test\\white-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "goes through the left (lesser) side of the binary tree, n times",
                  "fullTitle": "White-box testing of quick sort algorithm N-level binary tree goes through the left (lesser) side of the binary tree, n times",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [9,8,6,2]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "b138c35b-33d7-48d7-a56d-e97b442afe05",
                  "parentUUID": "ef8a254b-5dfd-4ee4-86fa-d018b8ab2548",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "goes through the right (greater) side of the binary tree, n times",
                  "fullTitle": "White-box testing of quick sort algorithm N-level binary tree goes through the right (greater) side of the binary tree, n times",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [2,6,8,9]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "5a8a6e57-4386-45de-903d-d51f0f43c71c",
                  "parentUUID": "ef8a254b-5dfd-4ee4-86fa-d018b8ab2548",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "has balanced binary tree",
                  "fullTitle": "White-box testing of quick sort algorithm N-level binary tree has balanced binary tree",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [9,6,12,3,10,1,11,9,20,8,15]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "dd282bfd-9974-41c9-8f54-3f7ffa5b12d4",
                  "parentUUID": "ef8a254b-5dfd-4ee4-86fa-d018b8ab2548",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b138c35b-33d7-48d7-a56d-e97b442afe05",
                "5a8a6e57-4386-45de-903d-d51f0f43c71c",
                "dd282bfd-9974-41c9-8f54-3f7ffa5b12d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2d1a2400-3c29-4fbc-8498-8943afa98c05",
              "title": "Other cases",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\white-box.spec.js",
              "file": "\\test\\white-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "puts all equal values onto the left side of binary tree",
                  "fullTitle": "White-box testing of quick sort algorithm Other cases puts all equal values onto the left side of binary tree",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [3,3,3]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "b0578d5d-e7d4-422e-8561-f78c89fe5e33",
                  "parentUUID": "2d1a2400-3c29-4fbc-8498-8943afa98c05",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b0578d5d-e7d4-422e-8561-f78c89fe5e33"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.3.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}