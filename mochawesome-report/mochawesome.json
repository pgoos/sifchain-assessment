{
  "stats": {
    "suites": 11,
    "tests": 22,
    "passes": 21,
    "pending": 0,
    "failures": 1,
    "start": "2021-03-21T22:38:26.924Z",
    "end": "2021-03-21T22:38:27.088Z",
    "duration": 164,
    "testsRegistered": 22,
    "passPercent": 95.45454545454545,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "413121bf-c570-40c2-a665-8e9cfe3c0b32",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7de86c7f-f398-4719-ad3b-cf6bf0b7f1e8",
          "title": "Black-box testing of a (any) sorting algorithm",
          "fullFile": "C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js",
          "file": "\\test\\black-box.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e292c8cb-03b8-4be1-ab80-fd92b6edef0b",
              "title": "small arrays",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js",
              "file": "\\test\\black-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns correctly already sorted array",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays returns correctly already sorted array",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [1, 2, 3, 4, 5, 6]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray)",
                  "err": {},
                  "uuid": "c269431b-375d-45bb-a877-b6348d2ca3d7",
                  "parentUUID": "e292c8cb-03b8-4be1-ab80-fd92b6edef0b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single element if input array contains only 1 element",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays returns single element if input array contains only 1 element",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [50]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray)",
                  "err": {},
                  "uuid": "84c28739-84f8-4794-b744-7142530f3800",
                  "parentUUID": "e292c8cb-03b8-4be1-ab80-fd92b6edef0b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts correctly when there are same numbers multiple times",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays sorts correctly when there are same numbers multiple times",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [5, 8, 5, 12, 5, 19, 5, 2, 3, 4, 6, 5]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "2133f0d0-348d-4fd4-9a3c-32c62421f623",
                  "parentUUID": "e292c8cb-03b8-4be1-ab80-fd92b6edef0b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts negative numbers correctly",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays sorts negative numbers correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [-22, -11, 1, -50, 4]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "68095841-2193-4f4e-b726-27766f099c98",
                  "parentUUID": "e292c8cb-03b8-4be1-ab80-fd92b6edef0b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts correctly partially sorted array",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays sorts correctly partially sorted array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [1, 2, 3, 4, 5, 6, 20, 11, 14, 9]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "a3b7ba7a-24fc-471a-8021-432fcc0ea87b",
                  "parentUUID": "e292c8cb-03b8-4be1-ab80-fd92b6edef0b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts correctly reverse sorted array",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays sorts correctly reverse sorted array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [10, 9, 7, 5, 3, 2, 1]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "b98817d7-bdd5-44d9-be2c-1b31a60fc4e9",
                  "parentUUID": "e292c8cb-03b8-4be1-ab80-fd92b6edef0b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts correctly unsorted array of positive values",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays sorts correctly unsorted array of positive values",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = randomArrayGenerator({\n    min: 1,\n    max: 100,\n    elements: 20\n})\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "e5c2d696-8945-45e6-9dd1-46cd83e1c6ae",
                  "parentUUID": "e292c8cb-03b8-4be1-ab80-fd92b6edef0b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts correctly unsorted array with zeros",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays sorts correctly unsorted array with zeros",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = randomArrayGenerator({\n    min: 1,\n    max: 100,\n    elements: 20\n})\ninputArray[10] = 0\ninputArray[14] = 0\ninputArray[19] = 0\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "96b27584-13aa-462e-ad35-a6ac86f918ae",
                  "parentUUID": "e292c8cb-03b8-4be1-ab80-fd92b6edef0b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c269431b-375d-45bb-a877-b6348d2ca3d7",
                "84c28739-84f8-4794-b744-7142530f3800",
                "2133f0d0-348d-4fd4-9a3c-32c62421f623",
                "68095841-2193-4f4e-b726-27766f099c98",
                "a3b7ba7a-24fc-471a-8021-432fcc0ea87b",
                "b98817d7-bdd5-44d9-be2c-1b31a60fc4e9",
                "e5c2d696-8945-45e6-9dd1-46cd83e1c6ae",
                "96b27584-13aa-462e-ad35-a6ac86f918ae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d2d7456b-3865-4fa0-84bd-00ca15dcd903",
              "title": "big arrays/big numbers",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js",
              "file": "\\test\\black-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sorts correctly big array",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm big arrays/big numbers sorts correctly big array",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = randomArrayGenerator({\n    min: 1,\n    max: 10000,\n    elements: 10000\n})\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "8bf3e441-fbdf-40f7-a0b8-01eac2b91f9f",
                  "parentUUID": "d2d7456b-3865-4fa0-84bd-00ca15dcd903",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts correctly array of big numbers",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm big arrays/big numbers sorts correctly array of big numbers",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = inputArray = randomArrayGenerator({\n    min: 1000000000000000,\n    max: 9000000000000000,\n    elements: 50\n})\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "25589448-cf16-4f8b-b8e6-e585cc58306c",
                  "parentUUID": "d2d7456b-3865-4fa0-84bd-00ca15dcd903",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8bf3e441-fbdf-40f7-a0b8-01eac2b91f9f",
                "25589448-cf16-4f8b-b8e6-e585cc58306c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 68,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "15fbc93b-3ce0-42ed-8ffe-32288fe2d3c1",
              "title": "floating values",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js",
              "file": "\\test\\black-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sorts correctly an array of float values",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm floating values sorts correctly an array of float values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [1.23, 4.67, 2.11, 8.59, 0.001, 2.00001, 10.333333333]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "18195692-e71f-4335-830e-7ade2495377e",
                  "parentUUID": "15fbc93b-3ce0-42ed-8ffe-32288fe2d3c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "18195692-e71f-4335-830e-7ade2495377e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2e818921-3ad9-40aa-a53d-a2bbca06bbf5",
              "title": "negative",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js",
              "file": "\\test\\black-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns empty array if empty array input is provided",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm negative returns empty array if empty array input is provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = []\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql([])",
                  "err": {},
                  "uuid": "be9b4ab8-7392-4def-91bd-9bf7535af97c",
                  "parentUUID": "2e818921-3ad9-40aa-a53d-a2bbca06bbf5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be9b4ab8-7392-4def-91bd-9bf7535af97c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9121bb50-f90b-4db3-8e5c-b2cab86b3852",
              "title": "others",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js",
              "file": "\\test\\black-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "verifies sorting algorithm is stable",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm others verifies sorting algorithm is stable",
                  "timedOut": false,
                  "duration": 25,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [{\n    id: 5,\n    name: 'paul'\n}, {\n    id: 8,\n    name: 'eva'\n}, {\n    id: 2,\n    name: 'john'\n}, {\n    id: 10,\n    name: 'nick'\n}, {\n    id: 5,\n    name: 'kevin'\n}, {\n    id: 5,\n    name: 'mike'\n}, {\n    id: 18,\n    name: 'peter'\n}, {\n    id: 1,\n    name: 'adam'\n}]\nconsole.log('input array=', inputArray)\nsortedArray = quickSortV2(inputArray)\nconsole.log('sorted array=', sortedArray)\nconst {\n    inputArrayIndexes,\n    sortedArrayIndexes\n} = findIndexes(['paul', 'kevin', 'mike'])\nconsole.log(inputArrayIndexes)\nconsole.log(sortedArrayIndexes)\n// verify that elements with the same id (same key), have relative order maintained\nsortedArrayIndexes.forEach((element, index) => {\n    expect(element[\"index\"]).to.be.at.least(inputArrayIndexes[index][\"index\"])\n})",
                  "err": {
                    "message": "AssertionError: expected 3 to be at least 4",
                    "estack": "AssertionError: expected 3 to be at least 4\n    at C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js:138:51\n    at Array.forEach (<anonymous>)\n    at Context.<anonymous> (test\\black-box.spec.js:137:32)\n    at processImmediate (internal/timers.js:461:21)",
                    "diff": "- 3\n+ 4\n"
                  },
                  "uuid": "76ce6a26-c55e-4e27-942b-ff05de18e40a",
                  "parentUUID": "9121bb50-f90b-4db3-8e5c-b2cab86b3852",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "76ce6a26-c55e-4e27-942b-ff05de18e40a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 25,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2eeb394a-0a66-4aa5-a4b3-2c41e25dd503",
          "title": "White-box testing of quick sort algorithm",
          "fullFile": "C:\\Projects\\sifchain-assessment\\test\\white-box.spec.js",
          "file": "\\test\\white-box.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c008a394-d1f3-45dd-956a-f9564bbed267",
              "title": "1-level binary tree",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\white-box.spec.js",
              "file": "\\test\\white-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns immediately when single element is provided",
                  "fullTitle": "White-box testing of quick sort algorithm 1-level binary tree returns immediately when single element is provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// comment: this is the same case as if input array would be empty\ninputArray = [6]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray)",
                  "err": {},
                  "uuid": "507dbb50-509d-4c76-9e5a-475704742a30",
                  "parentUUID": "c008a394-d1f3-45dd-956a-f9564bbed267",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "goes through the right (greater) side of the binary tree, once",
                  "fullTitle": "White-box testing of quick sort algorithm 1-level binary tree goes through the right (greater) side of the binary tree, once",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [1,2]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray)",
                  "err": {},
                  "uuid": "38716e25-f838-4282-a69a-05b8c2ac036d",
                  "parentUUID": "c008a394-d1f3-45dd-956a-f9564bbed267",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "goes through the left (lesser) side of the binary tree, once",
                  "fullTitle": "White-box testing of quick sort algorithm 1-level binary tree goes through the left (lesser) side of the binary tree, once",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [2, 1]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "63664846-7738-46d3-a277-961409686f84",
                  "parentUUID": "c008a394-d1f3-45dd-956a-f9564bbed267",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "goes through the left (lesser) side of the binary tree, once",
                  "fullTitle": "White-box testing of quick sort algorithm 1-level binary tree goes through the left (lesser) side of the binary tree, once",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [2, 1]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "dfd5b20c-45ab-41ed-aced-502cf1eaffb3",
                  "parentUUID": "c008a394-d1f3-45dd-956a-f9564bbed267",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "507dbb50-509d-4c76-9e5a-475704742a30",
                "38716e25-f838-4282-a69a-05b8c2ac036d",
                "63664846-7738-46d3-a277-961409686f84",
                "dfd5b20c-45ab-41ed-aced-502cf1eaffb3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "58e77c8f-4cd0-4049-9a5b-bb434df1d6da",
              "title": "2-level binary tree",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\white-box.spec.js",
              "file": "\\test\\white-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates 2 level binary tree",
                  "fullTitle": "White-box testing of quick sort algorithm 2-level binary tree creates 2 level binary tree",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [10,7,12,8,11]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "bea8d5ec-2f83-45a9-a6a9-f5da3a088989",
                  "parentUUID": "58e77c8f-4cd0-4049-9a5b-bb434df1d6da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bea8d5ec-2f83-45a9-a6a9-f5da3a088989"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d621b81c-d611-4abb-8c99-9cb605ca81c3",
              "title": "N-level binary tree",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\white-box.spec.js",
              "file": "\\test\\white-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "goes through the left (lesser) side of the binary tree, n times",
                  "fullTitle": "White-box testing of quick sort algorithm N-level binary tree goes through the left (lesser) side of the binary tree, n times",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [9,8,6,2]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "d819d2cb-c4c1-4616-8feb-6f6b65e7b6e4",
                  "parentUUID": "d621b81c-d611-4abb-8c99-9cb605ca81c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "goes through the right (greater) side of the binary tree, n times",
                  "fullTitle": "White-box testing of quick sort algorithm N-level binary tree goes through the right (greater) side of the binary tree, n times",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [2,6,8,9]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "ee31c0b7-ea46-42e2-94e7-a5c99f4c4440",
                  "parentUUID": "d621b81c-d611-4abb-8c99-9cb605ca81c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "has balanced binary tree",
                  "fullTitle": "White-box testing of quick sort algorithm N-level binary tree has balanced binary tree",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [9,6,12,3,10,1,11,9,20,8,15]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "dcc58b01-736e-483d-b443-077d84bd2c43",
                  "parentUUID": "d621b81c-d611-4abb-8c99-9cb605ca81c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d819d2cb-c4c1-4616-8feb-6f6b65e7b6e4",
                "ee31c0b7-ea46-42e2-94e7-a5c99f4c4440",
                "dcc58b01-736e-483d-b443-077d84bd2c43"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "556031cd-849d-4921-8e3a-026f26ce3e11",
              "title": "Other cases",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\white-box.spec.js",
              "file": "\\test\\white-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "puts all equal values onto the left side of binary tree",
                  "fullTitle": "White-box testing of quick sort algorithm Other cases puts all equal values onto the left side of binary tree",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [3,3,3]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "841b042e-f2a8-4cb7-a862-1866be7eef75",
                  "parentUUID": "556031cd-849d-4921-8e3a-026f26ce3e11",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "841b042e-f2a8-4cb7-a862-1866be7eef75"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.3.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}