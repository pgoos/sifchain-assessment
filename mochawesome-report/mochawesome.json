{
  "stats": {
    "suites": 11,
    "tests": 21,
    "passes": 20,
    "pending": 0,
    "failures": 1,
    "start": "2021-03-22T14:35:49.520Z",
    "end": "2021-03-22T14:35:49.716Z",
    "duration": 196,
    "testsRegistered": 21,
    "passPercent": 95.23809523809523,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fa8c1bcd-3b33-4583-8eae-2fc7a224085b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cd4f972e-1f4a-48e8-8fd7-00fd7b3c8093",
          "title": "Black-box testing of a (any) sorting algorithm",
          "fullFile": "C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js",
          "file": "\\test\\black-box.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c886d700-1d7a-4966-8332-d7ce446dc351",
              "title": "small arrays",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js",
              "file": "\\test\\black-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns correctly already sorted array",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays returns correctly already sorted array",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [1, 2, 3, 4, 5, 6]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray)",
                  "err": {},
                  "uuid": "ab6e03d7-876a-4163-a5d0-1f53ef69c84f",
                  "parentUUID": "c886d700-1d7a-4966-8332-d7ce446dc351",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "returns single element if input array contains only 1 element",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays returns single element if input array contains only 1 element",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [50]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray)",
                  "err": {},
                  "uuid": "46f61884-2a0f-483a-9bbd-bf62a41c1f9c",
                  "parentUUID": "c886d700-1d7a-4966-8332-d7ce446dc351",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts correctly when there are same numbers multiple times",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays sorts correctly when there are same numbers multiple times",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [5, 8, 5, 12, 5, 19, 5, 2, 3, 4, 6, 5]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "777d46ef-7238-4ef7-bfdd-396afdb7f14c",
                  "parentUUID": "c886d700-1d7a-4966-8332-d7ce446dc351",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts negative numbers correctly",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays sorts negative numbers correctly",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [-22, -11, 1, -50, 4]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "0c5d2d19-6f5f-4100-ba9e-8435e635fe5f",
                  "parentUUID": "c886d700-1d7a-4966-8332-d7ce446dc351",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts correctly partially sorted array",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays sorts correctly partially sorted array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [1, 2, 3, 4, 5, 6, 20, 11, 14, 9]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "ef6d09a4-3f34-4822-9c08-bd76216c5e96",
                  "parentUUID": "c886d700-1d7a-4966-8332-d7ce446dc351",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts correctly reverse sorted array",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays sorts correctly reverse sorted array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [10, 9, 7, 5, 3, 2, 1]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "ee42e3c0-1a87-4db2-bda8-c28406aca0f0",
                  "parentUUID": "c886d700-1d7a-4966-8332-d7ce446dc351",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts correctly unsorted array of positive values",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays sorts correctly unsorted array of positive values",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = randomArrayGenerator({\n    min: 1,\n    max: 100,\n    elements: 20\n})\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "eb4a1c16-21db-4920-a76e-466fc8471933",
                  "parentUUID": "c886d700-1d7a-4966-8332-d7ce446dc351",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts correctly unsorted array with zeros",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm small arrays sorts correctly unsorted array with zeros",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = randomArrayGenerator({\n    min: 1,\n    max: 100,\n    elements: 20\n})\ninputArray[10] = 0\ninputArray[14] = 0\ninputArray[19] = 0\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "ba87630e-b802-49d0-9bd0-176d7a490e19",
                  "parentUUID": "c886d700-1d7a-4966-8332-d7ce446dc351",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab6e03d7-876a-4163-a5d0-1f53ef69c84f",
                "46f61884-2a0f-483a-9bbd-bf62a41c1f9c",
                "777d46ef-7238-4ef7-bfdd-396afdb7f14c",
                "0c5d2d19-6f5f-4100-ba9e-8435e635fe5f",
                "ef6d09a4-3f34-4822-9c08-bd76216c5e96",
                "ee42e3c0-1a87-4db2-bda8-c28406aca0f0",
                "eb4a1c16-21db-4920-a76e-466fc8471933",
                "ba87630e-b802-49d0-9bd0-176d7a490e19"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "856220de-d449-4949-b2b2-19cd56369868",
              "title": "big arrays/big numbers",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js",
              "file": "\\test\\black-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sorts correctly big array",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm big arrays/big numbers sorts correctly big array",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = randomArrayGenerator({\n    min: 1,\n    max: 10000,\n    elements: 10000\n})\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "7a65059b-e667-40cd-9040-7b158fda61cf",
                  "parentUUID": "856220de-d449-4949-b2b2-19cd56369868",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "sorts correctly array of big numbers",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm big arrays/big numbers sorts correctly array of big numbers",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = inputArray = randomArrayGenerator({\n    min: 1000000000000000,\n    max: 9000000000000000,\n    elements: 50\n})\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "5ed150d9-1308-4498-a540-c62aa36b7730",
                  "parentUUID": "856220de-d449-4949-b2b2-19cd56369868",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a65059b-e667-40cd-9040-7b158fda61cf",
                "5ed150d9-1308-4498-a540-c62aa36b7730"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "00dd23ee-25f5-4be5-add7-7115eea94f1b",
              "title": "floating values",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js",
              "file": "\\test\\black-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "sorts correctly an array of float values",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm floating values sorts correctly an array of float values",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [1.23, 4.67, 2.11, 8.59, 0.001, 2.00001, 10.333333333]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "48253f38-3dbf-4010-96a6-2277efc312f6",
                  "parentUUID": "00dd23ee-25f5-4be5-add7-7115eea94f1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "48253f38-3dbf-4010-96a6-2277efc312f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "77b0264c-ca14-46c1-bb12-9ac5e6873625",
              "title": "negative",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js",
              "file": "\\test\\black-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns empty array if empty array input is provided",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm negative returns empty array if empty array input is provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = []\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql([])",
                  "err": {},
                  "uuid": "c3284c6f-dc1a-45ac-9b2f-729b31baff53",
                  "parentUUID": "77b0264c-ca14-46c1-bb12-9ac5e6873625",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c3284c6f-dc1a-45ac-9b2f-729b31baff53"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d729230-08de-4643-bf93-8a4ba5382c8b",
              "title": "others",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js",
              "file": "\\test\\black-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "verifies sorting algorithm is stable",
                  "fullTitle": "Black-box testing of a (any) sorting algorithm others verifies sorting algorithm is stable",
                  "timedOut": false,
                  "duration": 33,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [{\n    id: 5,\n    name: 'paul'\n}, {\n    id: 8,\n    name: 'eva'\n}, {\n    id: 2,\n    name: 'john'\n}, {\n    id: 10,\n    name: 'nick'\n}, {\n    id: 5,\n    name: 'kevin'\n}, {\n    id: 5,\n    name: 'mike'\n}, {\n    id: 18,\n    name: 'peter'\n}, {\n    id: 1,\n    name: 'adam'\n}]\nconsole.log('input array=', inputArray)\nsortedArray = quickSortV2(inputArray)\nconsole.log('sorted array=', sortedArray)\nconst {\n    inputArrayIndexes,\n    sortedArrayIndexes\n} = findIndexes(['paul', 'kevin', 'mike'])\nconsole.log(inputArrayIndexes)\nconsole.log(sortedArrayIndexes)\n// verify that elements with the same id (same key), have relative order maintained\nsortedArrayIndexes.forEach((element, index) => {\n    expect(element[\"index\"]).to.be.at.least(inputArrayIndexes[index][\"index\"])\n})",
                  "err": {
                    "message": "AssertionError: expected 3 to be at least 4",
                    "estack": "AssertionError: expected 3 to be at least 4\n    at C:\\Projects\\sifchain-assessment\\test\\black-box.spec.js:138:51\n    at Array.forEach (<anonymous>)\n    at Context.<anonymous> (test\\black-box.spec.js:137:32)\n    at processImmediate (internal/timers.js:461:21)",
                    "diff": "- 3\n+ 4\n"
                  },
                  "uuid": "c35ca863-3231-4770-9f19-898fc6467a98",
                  "parentUUID": "4d729230-08de-4643-bf93-8a4ba5382c8b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c35ca863-3231-4770-9f19-898fc6467a98"
              ],
              "pending": [],
              "skipped": [],
              "duration": 33,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5501257a-585f-4bd3-b10f-93ee5e86770a",
          "title": "White-box testing of quick sort algorithm",
          "fullFile": "C:\\Projects\\sifchain-assessment\\test\\white-box.spec.js",
          "file": "\\test\\white-box.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "367bfc77-e483-4989-8f22-3defd3dbc162",
              "title": "1-level binary tree",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\white-box.spec.js",
              "file": "\\test\\white-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "returns immediately when single element is provided",
                  "fullTitle": "White-box testing of quick sort algorithm 1-level binary tree returns immediately when single element is provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// comment: this is the same case as if input array would be empty\ninputArray = [6]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray)",
                  "err": {},
                  "uuid": "038aed3a-091e-4494-afff-c65493a4699c",
                  "parentUUID": "367bfc77-e483-4989-8f22-3defd3dbc162",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "goes through the right (greater) side of the binary tree, once",
                  "fullTitle": "White-box testing of quick sort algorithm 1-level binary tree goes through the right (greater) side of the binary tree, once",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [1,2]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray)",
                  "err": {},
                  "uuid": "7c743e7e-e2b5-4d0f-b62f-0652f5797907",
                  "parentUUID": "367bfc77-e483-4989-8f22-3defd3dbc162",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "goes through the left (lesser) side of the binary tree, once",
                  "fullTitle": "White-box testing of quick sort algorithm 1-level binary tree goes through the left (lesser) side of the binary tree, once",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [2, 1]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "57753498-9e04-408e-8bf4-e88b621b9ee8",
                  "parentUUID": "367bfc77-e483-4989-8f22-3defd3dbc162",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "038aed3a-091e-4494-afff-c65493a4699c",
                "7c743e7e-e2b5-4d0f-b62f-0652f5797907",
                "57753498-9e04-408e-8bf4-e88b621b9ee8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "33c7cced-61d8-48fd-8755-8b63b61e83f4",
              "title": "2-level binary tree",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\white-box.spec.js",
              "file": "\\test\\white-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "creates 2 level binary tree",
                  "fullTitle": "White-box testing of quick sort algorithm 2-level binary tree creates 2 level binary tree",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [10,7,12,8,11]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "b957081b-ad31-420a-8a6c-0055441c1d84",
                  "parentUUID": "33c7cced-61d8-48fd-8755-8b63b61e83f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b957081b-ad31-420a-8a6c-0055441c1d84"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aa4e453b-4db2-426b-b829-8c4614f34e08",
              "title": "N-level binary tree",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\white-box.spec.js",
              "file": "\\test\\white-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "goes through the left (lesser) side of the binary tree, n times",
                  "fullTitle": "White-box testing of quick sort algorithm N-level binary tree goes through the left (lesser) side of the binary tree, n times",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [9,8,6,2]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "8625fb13-f4a0-4f9d-81ec-7f836ecb59d9",
                  "parentUUID": "aa4e453b-4db2-426b-b829-8c4614f34e08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "goes through the right (greater) side of the binary tree, n times",
                  "fullTitle": "White-box testing of quick sort algorithm N-level binary tree goes through the right (greater) side of the binary tree, n times",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [2,6,8,9]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "ccb82f37-fca4-4652-a272-1722596d82dd",
                  "parentUUID": "aa4e453b-4db2-426b-b829-8c4614f34e08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "has balanced binary tree",
                  "fullTitle": "White-box testing of quick sort algorithm N-level binary tree has balanced binary tree",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [9,6,12,3,10,1,11,9,20,8,15]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "8e2fcc30-29ac-4484-b7e6-a3dc2737da27",
                  "parentUUID": "aa4e453b-4db2-426b-b829-8c4614f34e08",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8625fb13-f4a0-4f9d-81ec-7f836ecb59d9",
                "ccb82f37-fca4-4652-a272-1722596d82dd",
                "8e2fcc30-29ac-4484-b7e6-a3dc2737da27"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "31691606-a366-4835-b570-ae2e020f3f9a",
              "title": "Other cases",
              "fullFile": "C:\\Projects\\sifchain-assessment\\test\\white-box.spec.js",
              "file": "\\test\\white-box.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "puts all equal values onto the left side of binary tree",
                  "fullTitle": "White-box testing of quick sort algorithm Other cases puts all equal values onto the left side of binary tree",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inputArray = [3,3,3]\nsortedArray = quickSort(inputArray)\nexpect(sortedArray).to.eql(inputArray.sort(compareNumbers))",
                  "err": {},
                  "uuid": "e59eae8b-909d-4fc1-b4be-754e41969bab",
                  "parentUUID": "31691606-a366-4835-b570-ae2e020f3f9a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e59eae8b-909d-4fc1-b4be-754e41969bab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.3.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}